// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  dueDate     String   @db.VarChar(10)
  status      Status   @default(NOT_STARTED)
  description String?
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @db.Timestamp(0)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model User {
  id                   Int             @id @default(autoincrement())
  name                 String          @db.VarChar(255)
  email                String          @unique @db.VarChar(255)
  password             String          @db.VarChar(255)
  createdAt            DateTime        @default(now()) @db.Timestamp(0)
  updatedAt            DateTime        @updatedAt @db.Timestamp(0)
  task                 Task[]
  album                Album[]
  fiendRequestSent     FriendRequest[] @relation("requestFrom")
  fiendRequestReceived FriendRequest[] @relation("requestTo")
}

model FriendRequest {
  id     Int                 @id @default(autoincrement())
  from   User                @relation("requestFrom", fields: [fromId], references: [id])
  fromId Int
  to     User                @relation("requestTo", fields: [toId], references: [id])
  toId   Int
  status FriendRequestStatus @default(PENDING)
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Album {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @db.Timestamp(0)
  photo       Photo[]
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Photo {
  photoId   Int      @id @default(autoincrement())
  filePath  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  albumId   Int
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
}
